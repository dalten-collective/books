/-  spider, *books
:: Import structure libraries from /sur.
/+  *strandio
:: import strandio from library/lib
::
=,  strand=strand:spider
:: p evaluates strand with some namespace. From within strand:spider you may access strand's names without a wing path (i.e., you can use face b rather than b.p).
|%
:: Produce a core with arms
+$  ccru  (unit client-response:iris)
:: ccru is a structured arm
+$  almost-trans
:: almost-trans is a structured arm
  $:  network=@tas
  :: transaction on etherum
      hash=@ux
      blocknumber=@ud
      name=@t
      direction=@tas
      timestamp=@da
      symbol=@t
      address=(unit @ux)
      amount=@rd
      from=@ux
      destination=@ux
      contract=(unit @ux)
      subtransactions=(set [t=@tas s=@t a=@rd ad=(unit @ux)])
      nonce=@ud
      txgas=(unit @rd)
      txgaslimit=(unit @rd)
      input=(unit @t)
      fee=@rd
      txsuccessful=?
      :: these are structured arms
  ==
  :: terminates running expression from almost-trans structured arm
--
::
|^  call-zapper
::Produce a call-zapper core whose battery includes a $ arm and compute the latter.
++  gth-hex
:: gth-hex arm
  |=  [a=[p=@da q=@ux] b=[p=@da q=@ux]]
  :: 1 armed gate defining cells a and b with from date and hex
  ?:(=(p.a p.b) (gth q.a q.b) (gth p.a p.b))
:: this gate is a comparator for sorting
::"if p in a is equal to p in b, produce whether q in a is greater than q in b, otherise produce whether p in a is greater than p in b"
++  make-http-request
:: http request arm
  |=  [uid=@t pwd=@t urb-address=@ux]
  ?~  p=(rush (scot %ux urb-address) ;~(pfix (jest '0x') (more dot (star aln))))  !!
  =;  [authorization=@t web-address=@t]
   ^-  request:http
   :+  %'GET'
     %^  cat  3
       'https://api.zapper.fi/v2/transactions?address='
     (cat 3 '0x' web-address)
   :_  ~
   :~  'Authorization'^(cat 3 'Basic ' authorization):: concatenate block size 3 with 0x and web-address
       'User-Agent'^'urbit_books'
   ==
  :_  (crip (zing u.p)):: zing makes it a single list.  Crip makes a trip to a cord.
  (en:base64:mimes:html (as-octs:mimes:html (rap 3 ~[uid ':' pwd])))
::
++  json-to-dino
  |=  [jon=json addy=@ux]
  :: dry gate defining jon and addy using hex mold
  |^  ^-  (list [[@da @ux] transaction])
  ::  defines list structure as date and hexidecimal
  =;  return=(set almost-trans)
    ;;  (list [[@da @ux] transaction])
    :: normalizes the list - mold
    %~  tap  in
    ;;  (set [[@da @ux] transaction])
    :: normalizes set to date, hex - mold
    %-  ~(run in return)
    |=  mid=almost-trans
    ^-  [[@da @ux] transaction]
    :: set mold for transaction cell date and hex
    :-  [timestamp.mid hash.mid]
    :: cell-2 tuple, timestamp.mid and hash.mid
    :-  addy
    %=    mid
      address    ?:(=(`0x0 address.mid) ~ address.mid)
      network    ;;(network network.mid)
      direction  ;;(direction direction.mid)
    :: Resolve a wing (mid) with changes.
    :: address , network, direction
        subtransactions
      %-  ~(run in subtransactions.mid)
      :: Call a gate (function) that is null terminated list
      |=  [t=@tas s=@t a=@rd ad=(unit @ux)]
      :: Produce a gate (a one-armed core with a sample).
      [;;(direction t) s a ?:(=(`0x0 address.mid) ~ address.mid)]
    ==
  =/  error=(unit @t)
  :: Combine a named noun with the subject, error = unit with t aura
    ((ot:dejs-soft:format [%message so:dejs-soft:format]~) jon)
  ?.  ?=(~ error)  *(set almost-trans)
  =,  dejs:format:: converts json to hoon data structure
  %.  jon
  :: Call a gate (function)-jon, inverted 
  %-  ot
  :: Call a gate (function) - ot
  :~  :-  %data
  :: create a null terminated tuple named data % signifies a symbol?
  :: 
      %-  as  %-  ot:: json object - string keys, parser for every key
      :~  network+(se %tas)
      :: null terminated list
          hash+(su ;~(pfix (jest '0x') hex))
          'blockNumber'^ni
          name+so:: creates name + parsing a string
          direction+(se %tas)
          'timeStamp'^du-string
          symbol+so
          address+(su:dejs-soft:format ;~(pfix (jest '0x') hex))
          amount+ne-string
          from+(su ;~(pfix (jest '0x') hex))
          destination+(su ;~(pfix (jest '0x') hex))
          contract+(su:dejs-soft:format ;~(pfix (jest '0x') hex))
          'subTransactions'^(as from-sub)
          nonce+(su dem)
          'gasPrice'^ne-soft-string
          'gasLimit'^ne-soft-string
          input+so:dejs-soft:format
          gas+ne
          'txSuccessful'^bo
  
  ++  du-string
  :: du-string arm
    |=  jon=^json
    :: jon is a json array containing the kind of json that with handles. jon is the sample of the gate produced by the wet gate
    :: Produce a gate, jon which was specified earlier (a one-armed core with a sample).
    =,  dejs:format
    ^-  @da
    :: typecast with date format
    ?>  ?=([%s *] jon)
    ((cu from-unix:chrono:userlib ni) [%n +.jon])
    :: possibly pulling from unix library
  ++  ne-string
  :: ne-string arm
    |=  jon=^json
    :: Produce a gate, jon which was specified earlier (a one-armed core with a sample).
    =,  dejs:format
    ^-  @rd
    :: typecast with double precesion 
    ?>  ?=([%s *] jon)
    (rash p.jon (cook ryld (cook royl-cell:^so json-rn)))
    :: Parse a cord with a given rule and crash if the cord isn't entirely parsed.
  ++  ne-soft-string
    |=  jon=^json
    =,  dejs-soft:format
    :: Container arm for unitized JSON decoding reparsers
    ^-  (unit @rd)
    ?.  ?=([%s *] jon)  ~
    (rush p.jon (cook ryld (cook royl-cell:^so json-rn)))
    :: Parse an atom with a given rule and produce null if the cord isn't entirely parsed.
  ++  from-sub
    =,  dejs:format
    :: Container arm for JSON decoding reparsers
    %-  ot
    :~  type+(se %tas)
        symbol+so
        amount+ne
        address+(su:dejs-soft:format ;~(pfix (jest '0x') hex))
    ==
  --
::
::  main thread
::
++  call-zapper
  ^-  thread:spider
  :: spider thread/transient states.
  |=  prep=vase
  =/  m  (strand ,vase)
  :: $vase is used wherever typed data is explicitly worked with.
  ^-  form:m
  :: explicit type??
  =/  uber
  :: what is uber? - see hyperlink
    !<  $:  bol=bowl:gall 
            uid=@t
            :: uid using text cord aura
            pw=@t
            :: pw using text cord aura
            addresses=(set @ux)
            :: Mold generator. A set is an unordered treap of items.
            trans=((mop ,[p=@da q=@ux] transaction) gth-hex)
            :: what is this?  p is using date aura and q is hex aura
        ==
    prep
  =/  addy  ~(tap in addresses.uber):: creates a list out of set
  :: what is addy
  =|  leg=(list [[@da @ux] transaction])
  =,  bol.uber
  |-  ?~  addy
    =;  vaz=vase
      (pure:m vaz)
    !>  ^-  $:  ((mop ,[p=@da q=@ux] transaction) gth-hex)
                (list [[@da @ux] transaction])
            ==
    =-  :-  next
    ::Combine a new noun, next with the subject, inverted.
        %~  tap  by
        :: Evaluate an arm in a door.
        %-  %~  dif  by  (malt leg)
        (malt (tap:((on ,[p=@da q=@ux] transaction) gth-hex) trans.uber))
    next=(gas:((on ,[p=@da q=@ux] transaction) gth-hex) trans.uber leg)
  ;<  ~      bind:m  (send-request (make-http-request uid.uber pw.uber i.addy))
  ;<  =ccru  bind:m  take-maybe-response
  ?~  ccru  $(addy t.addy)
  ;<  r=@t   bind:m  (extract-body u.ccru)
  ?~  jun=(de-json:html r)  $(addy t.addy)
  %=  $
    leg   (weld (json-to-dino u.jun i.addy) leg)
    addy  t.addy
  ==
--
